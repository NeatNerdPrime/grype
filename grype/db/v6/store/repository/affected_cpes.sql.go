// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: affected_cpes.sql

package repository

import (
	"context"
	"database/sql"
)

const createAffectedCpe = `-- name: CreateAffectedCpe :one
INSERT INTO affected_cpes (vulnerability_id, type, vendor, product, version, "update", target_software)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING affected_id
`

type CreateAffectedCpeParams struct {
	VulnerabilityID int64          `db:"vulnerability_id" json:"vulnerabilityId"`
	Type            string         `db:"type" json:"type"`
	Vendor          sql.NullString `db:"vendor" json:"vendor"`
	Product         string         `db:"product" json:"product"`
	Version         sql.NullString `db:"version" json:"version"`
	Update          sql.NullString `db:"update" json:"update"`
	TargetSoftware  sql.NullString `db:"target_software" json:"targetSoftware"`
}

func (q *Queries) CreateAffectedCpe(ctx context.Context, arg CreateAffectedCpeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAffectedCpe,
		arg.VulnerabilityID,
		arg.Type,
		arg.Vendor,
		arg.Product,
		arg.Version,
		arg.Update,
		arg.TargetSoftware,
	)
	var affected_id int64
	err := row.Scan(&affected_id)
	return affected_id, err
}

const listAffectedCPEsByProduct = `-- name: ListAffectedCPEsByProduct :many
SELECT affected_id, vulnerability_id, type, vendor, product, version, "update", target_software FROM affected_cpes
WHERE product = ?
`

func (q *Queries) ListAffectedCPEsByProduct(ctx context.Context, product string) ([]AffectedCpe, error) {
	rows, err := q.db.QueryContext(ctx, listAffectedCPEsByProduct, product)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AffectedCpe{}
	for rows.Next() {
		var i AffectedCpe
		if err := rows.Scan(
			&i.AffectedID,
			&i.VulnerabilityID,
			&i.Type,
			&i.Vendor,
			&i.Product,
			&i.Version,
			&i.Update,
			&i.TargetSoftware,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAffectedCPEsByProductAndVendor = `-- name: ListAffectedCPEsByProductAndVendor :many
SELECT affected_id, vulnerability_id, type, vendor, product, version, "update", target_software FROM affected_cpes
WHERE product = ?
  AND vendor = ?
ORDER BY product, vendor
`

type ListAffectedCPEsByProductAndVendorParams struct {
	Product string         `db:"product" json:"product"`
	Vendor  sql.NullString `db:"vendor" json:"vendor"`
}

func (q *Queries) ListAffectedCPEsByProductAndVendor(ctx context.Context, arg ListAffectedCPEsByProductAndVendorParams) ([]AffectedCpe, error) {
	rows, err := q.db.QueryContext(ctx, listAffectedCPEsByProductAndVendor, arg.Product, arg.Vendor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AffectedCpe{}
	for rows.Next() {
		var i AffectedCpe
		if err := rows.Scan(
			&i.AffectedID,
			&i.VulnerabilityID,
			&i.Type,
			&i.Vendor,
			&i.Product,
			&i.Version,
			&i.Update,
			&i.TargetSoftware,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAffectedCPEsByProductAndVendorAndVersion = `-- name: ListAffectedCPEsByProductAndVendorAndVersion :many
SELECT affected_id, vulnerability_id, type, vendor, product, version, "update", target_software FROM affected_cpes
WHERE product = ?
  AND vendor = ?
  AND version = ?
ORDER BY product, vendor, version
`

type ListAffectedCPEsByProductAndVendorAndVersionParams struct {
	Product string         `db:"product" json:"product"`
	Vendor  sql.NullString `db:"vendor" json:"vendor"`
	Version sql.NullString `db:"version" json:"version"`
}

func (q *Queries) ListAffectedCPEsByProductAndVendorAndVersion(ctx context.Context, arg ListAffectedCPEsByProductAndVendorAndVersionParams) ([]AffectedCpe, error) {
	rows, err := q.db.QueryContext(ctx, listAffectedCPEsByProductAndVendorAndVersion, arg.Product, arg.Vendor, arg.Version)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AffectedCpe{}
	for rows.Next() {
		var i AffectedCpe
		if err := rows.Scan(
			&i.AffectedID,
			&i.VulnerabilityID,
			&i.Type,
			&i.Vendor,
			&i.Product,
			&i.Version,
			&i.Update,
			&i.TargetSoftware,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
