// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: database_specific_nvd.sql

package repository

import (
	"context"
	"database/sql"
)

const createDatabaseSpecificNvd = `-- name: CreateDatabaseSpecificNvd :one
INSERT INTO database_specific_nvd (db_specific_id, vulnStatus, cisaExploitAdd, cisaActionDue, cisaRequiredAction, cisaVulnerabilityName)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING db_specific_id
`

type CreateDatabaseSpecificNvdParams struct {
	DbSpecificID          int64          `db:"db_specific_id" json:"dbSpecificId"`
	Vulnstatus            sql.NullString `db:"vulnstatus" json:"vulnstatus"`
	Cisaexploitadd        sql.NullString `db:"cisaexploitadd" json:"cisaexploitadd"`
	Cisaactiondue         sql.NullString `db:"cisaactiondue" json:"cisaactiondue"`
	Cisarequiredaction    sql.NullString `db:"cisarequiredaction" json:"cisarequiredaction"`
	Cisavulnerabilityname sql.NullString `db:"cisavulnerabilityname" json:"cisavulnerabilityname"`
}

func (q *Queries) CreateDatabaseSpecificNvd(ctx context.Context, arg CreateDatabaseSpecificNvdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDatabaseSpecificNvd,
		arg.DbSpecificID,
		arg.Vulnstatus,
		arg.Cisaexploitadd,
		arg.Cisaactiondue,
		arg.Cisarequiredaction,
		arg.Cisavulnerabilityname,
	)
	var db_specific_id int64
	err := row.Scan(&db_specific_id)
	return db_specific_id, err
}

const listDatabaseSpecificNvd = `-- name: ListDatabaseSpecificNvd :many
SELECT db_specific_id, vulnstatus, cisaexploitadd, cisaactiondue, cisarequiredaction, cisavulnerabilityname FROM database_specific_nvd
`

func (q *Queries) ListDatabaseSpecificNvd(ctx context.Context) ([]DatabaseSpecificNvd, error) {
	rows, err := q.db.QueryContext(ctx, listDatabaseSpecificNvd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatabaseSpecificNvd{}
	for rows.Next() {
		var i DatabaseSpecificNvd
		if err := rows.Scan(
			&i.DbSpecificID,
			&i.Vulnstatus,
			&i.Cisaexploitadd,
			&i.Cisaactiondue,
			&i.Cisarequiredaction,
			&i.Cisavulnerabilityname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
