// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: affected_distro_packages.sql

package repository

import (
	"context"
	"database/sql"
)

const createAffectedDistroPackage = `-- name: CreateAffectedDistroPackage :one
INSERT INTO affected_distro_packages (affected_id, vulnerability_id, package_name, os_id)
VALUES (?, ?, ?, ?)
RETURNING affected_id
`

type CreateAffectedDistroPackageParams struct {
	AffectedID      int64  `db:"affected_id" json:"affectedId"`
	VulnerabilityID int64  `db:"vulnerability_id" json:"vulnerabilityId"`
	PackageName     string `db:"package_name" json:"packageName"`
	OsID            int64  `db:"os_id" json:"osId"`
}

func (q *Queries) CreateAffectedDistroPackage(ctx context.Context, arg CreateAffectedDistroPackageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAffectedDistroPackage,
		arg.AffectedID,
		arg.VulnerabilityID,
		arg.PackageName,
		arg.OsID,
	)
	var affected_id int64
	err := row.Scan(&affected_id)
	return affected_id, err
}

const listAffectedDistroPackagesByPackageNameAndOsMajorMinorVersion = `-- name: ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersion :many
SELECT adp.affected_id, adp.vulnerability_id, adp.package_name, adp.os_id, os.name, os.major_version, os.minor_version
FROM affected_distro_packages adp
         JOIN operating_systems os ON adp.os_id = os.os_id
WHERE adp.package_name = ?
  AND os.name = ?
  AND os.major_version = ?
  AND os.minor_version = ?
`

type ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersionParams struct {
	PackageName  string         `db:"package_name" json:"packageName"`
	Name         string         `db:"name" json:"name"`
	MajorVersion string         `db:"major_version" json:"majorVersion"`
	MinorVersion sql.NullString `db:"minor_version" json:"minorVersion"`
}

type ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersionRow struct {
	AffectedID      int64          `db:"affected_id" json:"affectedId"`
	VulnerabilityID int64          `db:"vulnerability_id" json:"vulnerabilityId"`
	PackageName     string         `db:"package_name" json:"packageName"`
	OsID            int64          `db:"os_id" json:"osId"`
	Name            string         `db:"name" json:"name"`
	MajorVersion    string         `db:"major_version" json:"majorVersion"`
	MinorVersion    sql.NullString `db:"minor_version" json:"minorVersion"`
}

func (q *Queries) ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersion(ctx context.Context, arg ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersionParams) ([]ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersionRow, error) {
	rows, err := q.db.QueryContext(ctx, listAffectedDistroPackagesByPackageNameAndOsMajorMinorVersion,
		arg.PackageName,
		arg.Name,
		arg.MajorVersion,
		arg.MinorVersion,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersionRow{}
	for rows.Next() {
		var i ListAffectedDistroPackagesByPackageNameAndOsMajorMinorVersionRow
		if err := rows.Scan(
			&i.AffectedID,
			&i.VulnerabilityID,
			&i.PackageName,
			&i.OsID,
			&i.Name,
			&i.MajorVersion,
			&i.MinorVersion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
