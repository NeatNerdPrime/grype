// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: database_specific.sql

package repository

import (
	"context"
)

const createDatabaseSpecific = `-- name: CreateDatabaseSpecific :one
INSERT INTO database_specific (entity_type)
VALUES (?)
RETURNING db_specific_id
`

func (q *Queries) CreateDatabaseSpecific(ctx context.Context, entityType string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDatabaseSpecific, entityType)
	var db_specific_id int64
	err := row.Scan(&db_specific_id)
	return db_specific_id, err
}

const listDatabaseSpecific = `-- name: ListDatabaseSpecific :many
SELECT db_specific_id, entity_type FROM database_specific
`

func (q *Queries) ListDatabaseSpecific(ctx context.Context) ([]DatabaseSpecific, error) {
	rows, err := q.db.QueryContext(ctx, listDatabaseSpecific)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatabaseSpecific{}
	for rows.Next() {
		var i DatabaseSpecific
		if err := rows.Scan(&i.DbSpecificID, &i.EntityType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
