// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: create.sql

package repository

import (
	"context"
	"database/sql"
)

const createAffected = `-- name: CreateAffected :one
INSERT INTO affected (entity_type)
VALUES (?)
RETURNING affected_id
`

func (q *Queries) CreateAffected(ctx context.Context, entityType string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAffected, entityType)
	var affected_id int64
	err := row.Scan(&affected_id)
	return affected_id, err
}

const createAffectedSeverity = `-- name: CreateAffectedSeverity :one
INSERT INTO affected_severities (affected_id, type, score, source, tag)
VALUES (?, ?, ?, ?, ?)
RETURNING affected_id
`

type CreateAffectedSeverityParams struct {
	AffectedID int64          `db:"affected_id" json:"affectedId"`
	Type       string         `db:"type" json:"type"`
	Score      string         `db:"score" json:"score"`
	Source     sql.NullString `db:"source" json:"source"`
	Tag        sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) CreateAffectedSeverity(ctx context.Context, arg CreateAffectedSeverityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAffectedSeverity,
		arg.AffectedID,
		arg.Type,
		arg.Score,
		arg.Source,
		arg.Tag,
	)
	var affected_id int64
	err := row.Scan(&affected_id)
	return affected_id, err
}

const createAffectedVersion = `-- name: CreateAffectedVersion :one
INSERT INTO affected_versions (affected_id, version)
VALUES (?, ?)
RETURNING affected_id
`

type CreateAffectedVersionParams struct {
	AffectedID int64  `db:"affected_id" json:"affectedId"`
	Version    string `db:"version" json:"version"`
}

func (q *Queries) CreateAffectedVersion(ctx context.Context, arg CreateAffectedVersionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAffectedVersion, arg.AffectedID, arg.Version)
	var affected_id int64
	err := row.Scan(&affected_id)
	return affected_id, err
}

const createAlias = `-- name: CreateAlias :one
INSERT INTO aliases (vulnerability_id, alias)
VALUES (?, ?)
RETURNING alias_id
`

type CreateAliasParams struct {
	VulnerabilityID int64  `db:"vulnerability_id" json:"vulnerabilityId"`
	Alias           string `db:"alias" json:"alias"`
}

func (q *Queries) CreateAlias(ctx context.Context, arg CreateAliasParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAlias, arg.VulnerabilityID, arg.Alias)
	var alias_id int64
	err := row.Scan(&alias_id)
	return alias_id, err
}

const createDbMetadata = `-- name: CreateDbMetadata :one
INSERT INTO db_metadata (build_timestamp, schema_version)
VALUES (?, ?)
RETURNING build_timestamp, schema_version
`

type CreateDbMetadataParams struct {
	BuildTimestamp string `db:"build_timestamp" json:"buildTimestamp"`
	SchemaVersion  int64  `db:"schema_version" json:"schemaVersion"`
}

func (q *Queries) CreateDbMetadata(ctx context.Context, arg CreateDbMetadataParams) (DbMetadatum, error) {
	row := q.db.QueryRowContext(ctx, createDbMetadata, arg.BuildTimestamp, arg.SchemaVersion)
	var i DbMetadatum
	err := row.Scan(&i.BuildTimestamp, &i.SchemaVersion)
	return i, err
}

const createLogicalPackage = `-- name: CreateLogicalPackage :one
INSERT INTO logical_package (logical_package_id, affected_id)
VALUES (?, ?)
RETURNING logical_package_id
`

type CreateLogicalPackageParams struct {
	LogicalPackageID int64 `db:"logical_package_id" json:"logicalPackageId"`
	AffectedID       int64 `db:"affected_id" json:"affectedId"`
}

func (q *Queries) CreateLogicalPackage(ctx context.Context, arg CreateLogicalPackageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createLogicalPackage, arg.LogicalPackageID, arg.AffectedID)
	var logical_package_id int64
	err := row.Scan(&logical_package_id)
	return logical_package_id, err
}

const createNotAffectedVersion = `-- name: CreateNotAffectedVersion :one
INSERT INTO not_affected_versions (affected_id, version)
VALUES (?, ?)
RETURNING affected_id
`

type CreateNotAffectedVersionParams struct {
	AffectedID int64  `db:"affected_id" json:"affectedId"`
	Version    string `db:"version" json:"version"`
}

func (q *Queries) CreateNotAffectedVersion(ctx context.Context, arg CreateNotAffectedVersionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNotAffectedVersion, arg.AffectedID, arg.Version)
	var affected_id int64
	err := row.Scan(&affected_id)
	return affected_id, err
}

const createPackageDigest = `-- name: CreatePackageDigest :one
INSERT INTO package_digests (vulnerability_id, digest_algorithm, digest_value)
VALUES (?, ?, ?)
RETURNING vulnerability_id, digest_algorithm, digest_value
`

type CreatePackageDigestParams struct {
	VulnerabilityID int64  `db:"vulnerability_id" json:"vulnerabilityId"`
	DigestAlgorithm string `db:"digest_algorithm" json:"digestAlgorithm"`
	DigestValue     string `db:"digest_value" json:"digestValue"`
}

func (q *Queries) CreatePackageDigest(ctx context.Context, arg CreatePackageDigestParams) (PackageDigest, error) {
	row := q.db.QueryRowContext(ctx, createPackageDigest, arg.VulnerabilityID, arg.DigestAlgorithm, arg.DigestValue)
	var i PackageDigest
	err := row.Scan(&i.VulnerabilityID, &i.DigestAlgorithm, &i.DigestValue)
	return i, err
}

const createPackageQualifier = `-- name: CreatePackageQualifier :one
INSERT INTO package_qualifiers (affected_id, entity_type)
VALUES (?, ?)
RETURNING qualifier_id
`

type CreatePackageQualifierParams struct {
	AffectedID sql.NullInt64 `db:"affected_id" json:"affectedId"`
	EntityType string        `db:"entity_type" json:"entityType"`
}

func (q *Queries) CreatePackageQualifier(ctx context.Context, arg CreatePackageQualifierParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPackageQualifier, arg.AffectedID, arg.EntityType)
	var qualifier_id int64
	err := row.Scan(&qualifier_id)
	return qualifier_id, err
}

const createPackageQualifierPlatformCpe = `-- name: CreatePackageQualifierPlatformCpe :one
INSERT INTO package_qualifier_platform_cpes (qualifier_id, cpe)
VALUES (?, ?)
RETURNING qualifier_id
`

type CreatePackageQualifierPlatformCpeParams struct {
	QualifierID int64  `db:"qualifier_id" json:"qualifierId"`
	Cpe         string `db:"cpe" json:"cpe"`
}

func (q *Queries) CreatePackageQualifierPlatformCpe(ctx context.Context, arg CreatePackageQualifierPlatformCpeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPackageQualifierPlatformCpe, arg.QualifierID, arg.Cpe)
	var qualifier_id int64
	err := row.Scan(&qualifier_id)
	return qualifier_id, err
}

const createPackageQualifierRpmModularity = `-- name: CreatePackageQualifierRpmModularity :one
INSERT INTO package_qualifier_rpm_modularities (qualifier_id, module)
VALUES (?, ?)
RETURNING qualifier_id
`

type CreatePackageQualifierRpmModularityParams struct {
	QualifierID int64  `db:"qualifier_id" json:"qualifierId"`
	Module      string `db:"module" json:"module"`
}

func (q *Queries) CreatePackageQualifierRpmModularity(ctx context.Context, arg CreatePackageQualifierRpmModularityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPackageQualifierRpmModularity, arg.QualifierID, arg.Module)
	var qualifier_id int64
	err := row.Scan(&qualifier_id)
	return qualifier_id, err
}

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (name, version, date_captured, input_digest, data_oci_repository)
VALUES (?, ?, ?, ?, ?)
RETURNING provider_id
`

type CreateProviderParams struct {
	Name              string         `db:"name" json:"name"`
	Version           sql.NullString `db:"version" json:"version"`
	DateCaptured      sql.NullString `db:"date_captured" json:"dateCaptured"`
	InputDigest       sql.NullString `db:"input_digest" json:"inputDigest"`
	DataOciRepository sql.NullString `db:"data_oci_repository" json:"dataOciRepository"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProvider,
		arg.Name,
		arg.Version,
		arg.DateCaptured,
		arg.InputDigest,
		arg.DataOciRepository,
	)
	var provider_id int64
	err := row.Scan(&provider_id)
	return provider_id, err
}

const createRangeEvent = `-- name: CreateRangeEvent :one
INSERT INTO range_events (affected_id, type, repo, introduced, fixed, last_affected, limit, state)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING event_id
`

type CreateRangeEventParams struct {
	AffectedID   int64          `db:"affected_id" json:"affectedId"`
	Type         string         `db:"type" json:"type"`
	Repo         sql.NullString `db:"repo" json:"repo"`
	Introduced   sql.NullString `db:"introduced" json:"introduced"`
	Fixed        sql.NullString `db:"fixed" json:"fixed"`
	LastAffected sql.NullString `db:"last_affected" json:"lastAffected"`
	Limit        sql.NullString `db:"limit" json:"limit"`
	State        sql.NullString `db:"state" json:"state"`
}

func (q *Queries) CreateRangeEvent(ctx context.Context, arg CreateRangeEventParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRangeEvent,
		arg.AffectedID,
		arg.Type,
		arg.Repo,
		arg.Introduced,
		arg.Fixed,
		arg.LastAffected,
		arg.Limit,
		arg.State,
	)
	var event_id int64
	err := row.Scan(&event_id)
	return event_id, err
}

const createReference = `-- name: CreateReference :one
INSERT INTO "references" (vulnerability_id, type, url)
VALUES (?, ?, ?)
RETURNING reference_id
`

type CreateReferenceParams struct {
	VulnerabilityID int64  `db:"vulnerability_id" json:"vulnerabilityId"`
	Type            string `db:"type" json:"type"`
	Url             string `db:"url" json:"url"`
}

func (q *Queries) CreateReference(ctx context.Context, arg CreateReferenceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createReference, arg.VulnerabilityID, arg.Type, arg.Url)
	var reference_id int64
	err := row.Scan(&reference_id)
	return reference_id, err
}

const createRelatedVulnerability = `-- name: CreateRelatedVulnerability :one
INSERT INTO related_vulnerabilities (vulnerability_id, related_vulnerability_id)
VALUES (?, ?)
RETURNING related_id
`

type CreateRelatedVulnerabilityParams struct {
	VulnerabilityID        int64  `db:"vulnerability_id" json:"vulnerabilityId"`
	RelatedVulnerabilityID string `db:"related_vulnerability_id" json:"relatedVulnerabilityId"`
}

func (q *Queries) CreateRelatedVulnerability(ctx context.Context, arg CreateRelatedVulnerabilityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRelatedVulnerability, arg.VulnerabilityID, arg.RelatedVulnerabilityID)
	var related_id int64
	err := row.Scan(&related_id)
	return related_id, err
}

const createSeverity = `-- name: CreateSeverity :one
INSERT INTO severities (vulnerability_id, type, score, source, tag)
VALUES (?, ?, ?, ?, ?)
RETURNING severity_id
`

type CreateSeverityParams struct {
	VulnerabilityID int64          `db:"vulnerability_id" json:"vulnerabilityId"`
	Type            string         `db:"type" json:"type"`
	Score           string         `db:"score" json:"score"`
	Source          sql.NullString `db:"source" json:"source"`
	Tag             sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) CreateSeverity(ctx context.Context, arg CreateSeverityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSeverity,
		arg.VulnerabilityID,
		arg.Type,
		arg.Score,
		arg.Source,
		arg.Tag,
	)
	var severity_id int64
	err := row.Scan(&severity_id)
	return severity_id, err
}

const createVulnerability = `-- name: CreateVulnerability :one
INSERT INTO vulnerabilities (provider_id, id, modified, published, withdrawn, summary_digest, detail_digest, database_specific_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING vulnerability_id
`

type CreateVulnerabilityParams struct {
	ProviderID         int64          `db:"provider_id" json:"providerId"`
	ID                 string         `db:"id" json:"id"`
	Modified           sql.NullString `db:"modified" json:"modified"`
	Published          sql.NullString `db:"published" json:"published"`
	Withdrawn          sql.NullString `db:"withdrawn" json:"withdrawn"`
	SummaryDigest      sql.NullString `db:"summary_digest" json:"summaryDigest"`
	DetailDigest       sql.NullString `db:"detail_digest" json:"detailDigest"`
	DatabaseSpecificID sql.NullInt64  `db:"database_specific_id" json:"databaseSpecificId"`
}

func (q *Queries) CreateVulnerability(ctx context.Context, arg CreateVulnerabilityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createVulnerability,
		arg.ProviderID,
		arg.ID,
		arg.Modified,
		arg.Published,
		arg.Withdrawn,
		arg.SummaryDigest,
		arg.DetailDigest,
		arg.DatabaseSpecificID,
	)
	var vulnerability_id int64
	err := row.Scan(&vulnerability_id)
	return vulnerability_id, err
}
