package v6

import (
	"github.com/anchore/grype/internal/log"
)

type VulnerabilityStore interface {
	AddVulnerabilities(vulns ...*Vulnerability) error
	GetVulnerability(vulnID string, includeAffectedPkgs bool) ([]Vulnerability, error)
}

type vulnerabilityStore struct {
	*StoreConfig
	*state
}

func NewVulnerabilityStore(cfg *StoreConfig) VulnerabilityStore {
	return &vulnerabilityStore{
		StoreConfig: cfg,
		state:       cfg.state(),
	}
}

func (s *vulnerabilityStore) GetVulnerability(id string, loadAuxInfo bool) ([]Vulnerability, error) {
	log.WithFields("name", id).Trace("fetching Vulnerability record")

	var models []Vulnerability

	db := s.db
	if loadAuxInfo {
		fields := s.getPreloadableFields(&Vulnerability{})
		for _, field := range fields {
			db = db.Preload(field)
		}
	}

	result := db.Where("name = ?", id).Find(&models)
	return models, result.Error
}

func (s *vulnerabilityStore) AddVulnerabilities(vulnerabilities ...*Vulnerability) error {
	return s.db.CreateInBatches(vulnerabilities, 100).Error
}
