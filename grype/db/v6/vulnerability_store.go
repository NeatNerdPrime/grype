package v6

import (
	"fmt"
	"github.com/anchore/grype/internal/log"
)

type VulnerabilityStore interface {
	AddVulnerabilities(vulns ...*VulnerabilityHandle) error
	GetVulnerability(vulnID string, includeAffectedPkgs bool) ([]VulnerabilityHandle, error)
}

type vulnerabilityStore struct {
	*StoreConfig
	*state
	blobStore *blobStore
}

func newVulnerabilityStore(cfg *StoreConfig, bs *blobStore) *vulnerabilityStore {
	return &vulnerabilityStore{
		StoreConfig: cfg,
		state:       cfg.state(),
		blobStore:   bs,
	}
}

func (s *vulnerabilityStore) GetVulnerability(id string, loadAuxInfo bool) ([]VulnerabilityHandle, error) {
	log.WithFields("name", id).Trace("fetching Vulnerability record")

	var models []VulnerabilityHandle

	db := s.db
	if loadAuxInfo {
		fields := s.getPreloadableFields(&VulnerabilityHandle{})
		for _, field := range fields {
			db = db.Preload(field)
		}
	}

	result := db.Where("name = ?", id).Find(&models)
	return models, result.Error
}

func (s *vulnerabilityStore) AddVulnerabilities(vulnerabilities ...*VulnerabilityHandle) error {
	for _, v := range vulnerabilities {
		if err := s.blobStore.AddVulnerabilityBlob(v); err != nil {
			return fmt.Errorf("unable to add affected blob: %w", err)
		}
		if err := s.db.Create(v).Error; err != nil {
			return err
		}

	}
	return nil
}
